import { default as axios } from "axios";
import * as cheerio from "cheerio";
import https from "https";
import fs from "fs";
import TelegramBot from "node-telegram-bot-api";
import nodeCron from "node-cron";
import dotenv from "dotenv";
import puppeteer from "puppeteer";
dotenv.config();

const SEARCH_TEXT = process.env.SEARCH_TEXT;
const TARGET_QUEUES = process.env.TARGET_QUEUES.split(",");

const STORAGE_FILE = process.env.STORAGE_FILE;
const SUBSCRIBER_FILE = process.env.SUBSCRIBER_FILE;
const token = process.env.TOKEN;

const bot = new TelegramBot(token, { polling: true });

function getSubscribers() {
  try {
    if (fs.existsSync(SUBSCRIBER_FILE)) {
      const data = fs.readFileSync(SUBSCRIBER_FILE, "utf8");
      return JSON.parse(data);
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:", error.message);
  }
  return [];
}

function addSubscriber(chatId) {
  const subscribers = getSubscribers();
  if (!subscribers.includes(chatId)) {
    subscribers.push(chatId);
    try {
      fs.writeFileSync(
        SUBSCRIBER_FILE,
        JSON.stringify(subscribers, null, 2),
        "utf8",
      );
      console.log(`–ù–æ–≤—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω: ${chatId}`);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:", error.message);
    }
  }
}
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  addSubscriber(chatId); // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–∞—à —Å–ø–∏—Å–æ–∫

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  bot.sendMessage(
    chatId,
    "–í—ñ—Ç–∞—é! –í–∏ –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ì–ü–í. –Ø –ø–æ–≤—ñ–¥–æ–º–ª—é –≤–∞—Å, –∫–æ–ª–∏ —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ –∑–º—ñ–Ω–∏—Ç—å—Å—è.",
  );
});
const makeGetRequest = async (url) => {
  let browser = null;
  try {
    // –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
    browser = await puppeteer.launch({
      headless: true,
      // 'args' –≤–∞–∂–Ω—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö Linux (VPS/VDS)
      args: ["--no-sandbox", "--disable-setuid-sandbox"],
    });

    const page = await browser.newPage();

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º User-Agent, –∫–∞–∫ —É —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞ (—ç—Ç–æ –≤—Å–µ –µ—â–µ –≤–∞–∂–Ω–æ)
    await page.setUserAgent(
      "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36",
    );

    console.log(`–ü–µ—Ä–µ—Ö–æ–∂—É –Ω–∞ ${url}...`);

    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –∂–¥–µ–º, –ø–æ–∫–∞ —Å–µ—Ç—å —É—Å–ø–æ–∫–æ–∏—Ç—Å—è (JS –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è)
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–æ 30 —Å–µ–∫—É–Ω–¥, —Ç.–∫. Puppeteer –º–µ–¥–ª–µ–Ω–Ω–µ–µ
    await page.goto(url, {
      waitUntil: "domcontentloaded", // –ñ–¥–µ–º —Ç–æ–ª—å–∫–æ HTML (–±—ã—Å—Ç—Ä–æ)
      timeout: 60000, // –î–∞–µ–º 60 —Å–µ–∫—É–Ω–¥ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    });
    console.log("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –ø–æ–ª—É—á–∞—é HTML...");

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π HTML-–∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ü–û–°–õ–ï –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è JavaScript
    const htmlData = await page.content();

    return htmlData;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ Puppeteer:", error);
    throw error;
  } finally {
    await browser.close();
  }
  // const proxyHost = "38.54.71.67";
  // const proxyPort = 80; // <-- –í–ê–ú –ù–£–ñ–ù–û –ù–ê–ô–¢–ò –ü–†–ê–í–ò–õ–¨–ù–´–ô –ü–û–†–¢!
  // const headers = {
  //   "User-Agent":
  //     "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36",
  // };
  // const agent = new https.Agent({
  //   rejectUnauthorized: false,
  // });

  // const responce = await axios.get(url, {
  //   // headers,
  //   // httpsAgent: agent,
  //   proxy: {
  //     protocol: "http",
  //     host: proxyHost,
  //     port: proxyPort,
  //     // auth: {
  //     //   username: "myuser", // <-- –Ω—É–∂–µ–Ω –ª–æ–≥–∏–Ω
  //     //   password: "GAz!R,6NSUHsQA$e", // <-- –Ω—É–∂–µ–Ω –ø–∞—Ä–æ–ª—å
  //     // },
  //   },
  // });
  // return responce.data;
};
const processPage = async (data) => {
  const $ = cheerio.load(data);
  let updateTimestampLine = null;
  $("p").each((index, element) => {
    const pText = $(element).text().trim();
    if (pText.includes(SEARCH_TEXT)) {
      updateTimestampLine = pText;
      return false;
    }
  });

  if (!updateTimestampLine) {
    console.log(`–ù–µ –Ω–∞–π–¥–µ–Ω —Ç–µ–∫—Å—Ç —Ç—Ä–∏–≥–≥–µ—Ä–∞ "${SEARCH_TEXT}".`);
    return;
  }

  let oldContent = "";
  if (fs.existsSync(STORAGE_FILE)) {
    oldContent = fs.readFileSync(STORAGE_FILE, "utf8");
  }

  if (oldContent === updateTimestampLine) {
    console.log("No changes detected.");
    return;
  }

  console.log("Content has changed!");
  console.log("Old:", oldContent);
  console.log("New:", updateTimestampLine);

  let foundSchedules = [];
  let count = 0;
  $("p").each((index, element) => {
    if (count >= 2) {
      return;
    }
    const pText = $(element).text().trim();
    for (const queuePrefix of TARGET_QUEUES) {
      if (pText.startsWith(queuePrefix)) {
        foundSchedules.push(pText);
        break;
      }
    }
    if (pText.includes(SEARCH_TEXT) && count >= 0) {
      console.log("Found search text:", pText);
      count++;
    }
    console.log("Processed paragraph:", pText, count);
  });
  let notificationContent;
  const header = `üîî **–û–ù–û–í–õ–ï–ù–ù–Ø –ì–†–ê–§–Ü–ö–Ü–í!** üîî\n\n${updateTimestampLine}`;

  if (foundSchedules.length === 0) {
    notificationContent = `${header}\n\n**–í–∞–∂–ª–∏–≤–æ:** –û–Ω–æ–≤–ª–µ–Ω–Ω—è –±—É–ª–æ, –∞–ª–µ —Ä–æ–∑–∫–ª–∞–¥ –¥–ª—è —á–µ—Ä–≥ ${TARGET_QUEUES.join(", ")} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ.`;
  } else {
    notificationContent = `${header}\n\n**–ó–Ω–∞–π–¥–µ–Ω–æ —Ä–æ–∑–∫–ª–∞–¥ –¥–ª—è –≤–∞—à–∏—Ö —á–µ—Ä–≥:**\n${foundSchedules.join("\n")}`;
  }
  await sendNotification(notificationContent);

  fs.writeFileSync(STORAGE_FILE, updateTimestampLine, "utf8");
};
async function sendNotification(messageContent) {
  console.log("–û–ë–ù–ê–†–£–ñ–ï–ù–û –ò–ó–ú–ï–ù–ï–ù–ò–ï! –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...", messageContent);

  const subscribers = getSubscribers();
  if (subscribers.length === 0) {
    console.log("–ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.");
    return;
  }

  console.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ${subscribers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...`);

  for (const chatId of subscribers) {
    try {
      await bot.sendMessage(chatId, messageContent, { parse_mode: "Markdown" });
      console.log(`–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${chatId}`);
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ ${chatId}: ${error}`);
    }
  }
}

const main = async () => {
  try {
    const responce = await makeGetRequest(
      encodeURI("https://www.zoe.com.ua/–≥—Ä–∞—Ñ—ñ–∫–∏-–ø–æ–≥–æ–¥–∏–Ω–Ω–∏—Ö-—Å—Ç–∞–±—ñ–ª—ñ–∑–∞—Ü—ñ–π–Ω–∏—Ö"),
    );

    await processPage(responce);
  } catch (e) {
    console.error(e);
  }
};

nodeCron.schedule("*/10 * * * *", () => {
  main();
});

main();
